#version 450
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 6) const int Scope = 3;
layout(constant_id = 0) const int Rows = 16;
layout(constant_id = 1) const int Columns = 16;
layout(constant_id = 5) const int Layout = 0;

layout(set = 0, binding = 0, std430) buffer SSBO32
{
    float data[];
} ssbo32;

layout(set = 0, binding = 0, std430) buffer SSBO16
{
    float16_t data[];
} ssbo16;

shared uint blah[512];

void main()
{
    uint _512 = 256u * gl_WorkGroupID.x;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _517;
    coopMatLoad(_517, ssbo32.data, _512, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _520 = 512u * gl_WorkGroupID.x;
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _525;
    coopMatLoad(_525, ssbo16.data, _520, 32u, gl_CooperativeMatrixLayoutRowMajor);
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _533;
    coopMatLoad(_533, ssbo32.data, _512, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _541;
    coopMatLoad(_541, ssbo16.data, _520, 32u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _549;
    coopMatLoad(_549, ssbo32.data, _512, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _557;
    coopMatLoad(_557, ssbo16.data, _520, 32u, int(Layout));
    uint _564 = 128u * gl_WorkGroupID.x;
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _569;
    coopMatLoad(_569, ssbo32.data, _564, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA> _577;
    coopMatLoad(_577, ssbo16.data, _512, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _585;
    coopMatLoad(_585, ssbo32.data, _564, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseB> _593;
    coopMatLoad(_593, ssbo16.data, _512, 16u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _601;
    coopMatLoad(_601, ssbo32.data, _564, 8u, int(Layout));
    coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseAccumulator> _609;
    coopMatLoad(_609, ssbo16.data, _512, 16u, int(Layout));
    coopMatStore(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0), ssbo32.data, _564, 0u, gl_CooperativeMatrixLayoutColumnMajor);
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(100u), ssbo32.data, _564, 0u, gl_CooperativeMatrixLayoutRowMajor);
    coopMatStore(coopmat<int, Scope, Rows, Columns, gl_MatrixUseA>(-100), ssbo32.data, _564, 0u, int(Layout));
    coopMatStore(coopmat<float16_t, Scope, Rows, Columns, gl_MatrixUseA>(float16_t(100.0)), ssbo32.data, _564, 0u, int(Layout));
    coopMatStore(coopmat<int16_t, Scope, Rows, Columns, gl_MatrixUseA>(-100s), ssbo32.data, _564, 0u, int(Layout));
    coopMatStore(coopmat<uint16_t, Scope, Rows, Columns, gl_MatrixUseA>(100us), ssbo32.data, _564, 0u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _706 = coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(100.0);
    for (int _872 = 0; _872 < int(uint(coopmat<float, Scope, Rows, Columns, gl_MatrixUseA>(0).length())); )
    {
        _706[_872] += 50.0;
        _872++;
        continue;
    }
    coopMatStore(_706, ssbo32.data, 0u, 16u, int(Layout));
    coopMatStore(coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA>(gl_WorkGroupID.x), ssbo32.data, 0u, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _748;
    coopMatLoad(_748, ssbo32.data, _512, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseB> _756;
    coopMatLoad(_756, ssbo32.data, _512, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseAccumulator> _764;
    coopMatLoad(_764, ssbo32.data, _512, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseA> _793;
    coopMatLoad(_793, ssbo32.data, _512, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseB> _801;
    coopMatLoad(_801, ssbo32.data, _512, 16u, int(Layout));
    coopmat<uint, Scope, Rows, Columns, gl_MatrixUseAccumulator> _809;
    coopMatLoad(_809, ssbo32.data, _512, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseA> _825;
    coopMatLoad(_825, ssbo32.data, _512, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseB> _833;
    coopMatLoad(_833, ssbo32.data, _512, 16u, int(Layout));
    coopmat<int, Scope, Rows, Columns, gl_MatrixUseAccumulator> _841;
    coopMatLoad(_841, ssbo32.data, _512, 16u, int(Layout));
    coopmat<float, Scope, Rows, Columns, gl_MatrixUseA> _849;
    coopMatLoad(_849, blah, 0u, 16u, int(Layout));
    coopMatStore(_849, blah, 0u, 16u, int(Layout));
}

